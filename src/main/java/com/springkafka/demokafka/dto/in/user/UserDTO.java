package com.springkafka.demokafka.dto.in.user;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonView;
import com.springkafka.demokafka.dto.BasePagedDTO;
import com.springkafka.demokafka.dto.view.Views;
import com.springkafka.demokafka.util.validation.ValidateFieldsNotBlank;
import jakarta.validation.constraints.NotBlank;
import lombok.AccessLevel;
import lombok.Builder;
import lombok.Data;
import lombok.experimental.FieldDefaults;

import java.time.format.DateTimeFormatter;

/**
 * @Project: demokafka
 * @Package: com.springkafka.demokafka.dto.in.user  *
 * @Author: ChuVanNam
 * @Date: 8/24/2025
 * @Time: 9:59 AM
 */

@Data // T·ª± ƒë·ªông t·∫°o c√°c ph∆∞∆°ng th·ª©c getter, setter, toString, equals v√† hashCode
@JsonInclude(JsonInclude.Include.NON_NULL) // Ch·ªâ bao g·ªìm c√°c tr∆∞·ªùng kh√¥ng null trong JSON
@FieldDefaults(level = AccessLevel.PRIVATE) // Thi·∫øt l·∫≠p m·ª©c ƒë·ªô truy c·∫≠p cho c√°c tr∆∞·ªùng l√† PRIVATE
@JsonView(Views.Public.class)
@ValidateFieldsNotBlank(fields = {"username", "email", "name"}) // custom validate
@Builder
public class UserDTO extends BasePagedDTO {
    Long id; // ID c·ªßa ng∆∞·ªùi d√πng, c√≥ th·ªÉ null n·∫øu ch∆∞a ƒë∆∞·ª£c t·∫°o
//    @NotBlank(message = "Username is required")
    String username; // T√™n ƒëƒÉng nh·∫≠p c·ªßa ng∆∞·ªùi d√πng
    String password; // M·∫≠t kh·∫©u c·ªßa ng∆∞·ªùi d√πng
//    @NotBlank(message = "Email is required")
    String email; // ƒê·ªãa ch·ªâ email c·ªßa ng∆∞·ªùi d√πng
//    @NotBlank(message = "Name is required")
    String name; // T√™n ƒë·∫ßy ƒë·ªß c·ªßa ng∆∞·ªùi d√πng
    String phoneNumber; // S·ªë ƒëi·ªán tho·∫°i c·ªßa ng∆∞·ªùi d√πng
    Boolean isActive = true; // Tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa ng∆∞·ªùi d√πng, m·∫∑c ƒë·ªãnh l√† true (ho·∫°t ƒë·ªông)

    // üëá Ghi ƒë√® field ƒë·ªÉ format l·∫°i kh√°c
    @JsonProperty("createdDate")
    public String getCreatedDateFormatted() {
        return super.getCreatedDate() != null
                ? super.getCreatedDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"))
                : null;
    }

    @JsonProperty("lastModifiedDate")
    public String getLastModifiedDateFormatted() {
        return super.getLastModifiedDate() != null
                ? super.getLastModifiedDate().format(DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss"))
                : null;
    }
}
